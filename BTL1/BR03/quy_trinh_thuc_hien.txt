mình đã tạo user va cap quyen cho cac user manager, employee, director nhu sau, tuong tu nhu chi nhanh 1 va 2
-- TẠO USER MANAGER
CREATE USER MANAGER IDENTIFIED BY 123;

-- TẠO USER EMPLOYEE
CREATE USER EMPLOYEE IDENTIFIED BY 123;

-- TẠO USER DIRECTOR
CREATE USER DIRECTOR IDENTIFIED BY 123;

-- CẤP QUYỀN CONNECT CHO DIRECTOR
GRANT CONNECT TO DIRECTOR;

-- CẤP QUYỀN CONNECT CHO CÁC USER
GRANT CONNECT, CREATE DATABASE LINK TO MANAGER;
GRANT CONNECT, CREATE DATABASE LINK TO EMPLOYEE;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN3 CHO DIRECTOR
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT_STOCK_MANAGER TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT_STOCK_EMPLOYEE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE_DETAIL TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.EMPLOYEE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.CUSTOMER TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.BRANCH TO DIRECTOR;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN3 CHO MANAGER
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE_DETAIL TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.EMPLOYEE TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.CUSTOMER TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT_STOCK_MANAGER TO MANAGER;

-- CẤP QUYỀN SELECT TRÊN BẢNG BRANCH CHO MANAGER
GRANT SELECT ON CN3.BRANCH TO MANAGER;

-- CẤP QUYỀN SELECT TRÊN BẢNG BRANCH CHO EMPLOYEE
GRANT SELECT ON CN3.BRANCH TO EMPLOYEE;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN3 CHO EMPLOYEE
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE_DETAIL TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.INVOICE TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.CUSTOMER TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN3.PRODUCT_STOCK_EMPLOYEE TO EMPLOYEE;


bay gio minh bat dau tao database link cho tung user
-- TẠO DATABASE LINK CHO MANAGER
connect MANAGER;

CREATE DATABASE LINK MANAGER_LINK1
CONNECT TO MANAGER IDENTIFIED BY "123"
USING 'nganlink3';

CREATE DATABASE LINK MANAGER_LINK2
CONNECT TO MANAGER IDENTIFIED BY "123"
USING 'thuylink';

-- TẠO DATABASE LINK CHO EMPLOYEE
connect EMPLOYEE;

CREATE DATABASE LINK EMPLOYEE_LINK1
CONNECT TO EMPLOYEE IDENTIFIED BY "123"
USING 'nganlink3';

CREATE DATABASE LINK EMPLOYEE_LINK2
CONNECT TO EMPLOYEE IDENTIFIED BY "123"
USING 'thuylink';


-- gán quyền tạo procedure------------------------------------------------
GRANT CREATE PROCEDURE TO MANAGER;
-- tạo procedure nhập khoở manager
CREATE OR REPLACE PROCEDURE IMPORT_STOCK_BR03(
    p_product_id   IN VARCHAR2,
    p_qty          IN NUMBER
)
AS
    v_qty_br01   NUMBER := 0;
    v_qty_br02   NUMBER := 0;
    v_remaining  NUMBER := p_qty;
BEGIN
    -- Lấy tồn kho ở BR01 và BR02
    SELECT NVL(QUANTITY_IN_STOCK, 0)
    INTO v_qty_br01
    FROM CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
    WHERE PRODUCT_ID = p_product_id;

    SELECT NVL(QUANTITY_IN_STOCK, 0)
    INTO v_qty_br02
    FROM CN2.PRODUCT_STOCK_MANAGER@MANAGER_LINK2
    WHERE PRODUCT_ID = p_product_id;

    IF v_qty_br01 >= p_qty AND v_qty_br01 >= v_qty_br02 THEN
        UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - p_qty
        WHERE PRODUCT_ID = p_product_id;

        UPDATE CN3.PRODUCT_STOCK_MANAGER
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + p_qty
        WHERE PRODUCT_ID = p_product_id;

        DBMS_OUTPUT.PUT_LINE('Đã nhập ' || p_qty || ' sản phẩm từ BR01');

    ELSIF v_qty_br02 >= p_qty THEN
        UPDATE CN2.PRODUCT_STOCK_MANAGER@MANAGER_LINK2
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - p_qty
        WHERE PRODUCT_ID = p_product_id;

        UPDATE CN3.PRODUCT_STOCK_MANAGER
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + p_qty
        WHERE PRODUCT_ID = p_product_id;

        DBMS_OUTPUT.PUT_LINE('Đã nhập ' || p_qty || ' sản phẩm từ BR02');

    ELSIF v_qty_br01 + v_qty_br02 >= p_qty THEN
        IF v_qty_br01 > 0 THEN
            UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - v_qty_br01
            WHERE PRODUCT_ID = p_product_id;

            UPDATE CN3.PRODUCT_STOCK_MANAGER
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + v_qty_br01
            WHERE PRODUCT_ID = p_product_id;

            v_remaining := v_remaining - v_qty_br01;
        END IF;

        IF v_remaining > 0 AND v_qty_br02 >= v_remaining THEN
            UPDATE CN2.PRODUCT_STOCK_MANAGER@MANAGER_LINK2
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - v_remaining
            WHERE PRODUCT_ID = p_product_id;

            UPDATE CN3.PRODUCT_STOCK_MANAGER
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + v_remaining
            WHERE PRODUCT_ID = p_product_id;

            DBMS_OUTPUT.PUT_LINE('Đã nhập từ BR01 (' || p_qty - v_remaining || ') và BR02 (' || v_remaining || ') sản phẩm');
        END IF;

    ELSE
        DBMS_OUTPUT.PUT_LINE('Không đủ sản phẩm ở BR01 và BR02 để nhập ' || p_qty || ' sản phẩm');
    END IF;

    COMMIT;
END;
/


-- tạo trigger chạy ở CN3---------------------------------------------------
CREATE OR REPLACE TRIGGER trg_update_stock_and_total
BEFORE INSERT ON INVOICE_DETAIL
FOR EACH ROW
DECLARE
    v_stock_qty    NUMBER := 0;
    v_unit_price   NUMBER := 0;
BEGIN
    -- 1. Lấy số lượng tồn kho (không cần kiểm tra BRANCH_ID)
    SELECT QUANTITY_IN_STOCK
    INTO v_stock_qty
    FROM PRODUCT_STOCK_MANAGER
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 2. Kiểm tra tồn kho
    IF v_stock_qty < :NEW.QUANTITY THEN
        RAISE_APPLICATION_ERROR(-20001,
            'Không đủ số lượng tồn kho cho sản phẩm ID ' || :NEW.PRODUCT_ID);
    END IF;

    -- 3. Trừ tồn kho
    UPDATE PRODUCT_STOCK_MANAGER
    SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - :NEW.QUANTITY
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 4. Lấy đơn giá
    SELECT UNIT_PRICE
    INTO v_unit_price
    FROM PRODUCT
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 5. Cộng tổng tiền vào hóa đơn
    UPDATE INVOICE
    SET TOTAL_AMOUNT = NVL(TOTAL_AMOUNT, 0) + (v_unit_price * :NEW.QUANTITY)
    WHERE INVOICE_ID = :NEW.INVOICE_ID;
END;
/

CREATE OR REPLACE TRIGGER trg_force_total_zero_on_invoice
BEFORE INSERT ON INVOICE
FOR EACH ROW
BEGIN
    -- Ép giá trị tổng tiền về 0 bất kể người dùng nhập gì
    :NEW.TOTAL_AMOUNT := 0;
END;
/

-- test chạyở manager
INSERT INTO CN3.INVOICE (INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID)
VALUES ('IV00000001', SYSDATE, 0, 'EMP0668', '15362');

INSERT INTO CN3.INVOICE_DETAIL (INVOICE_ID, PRODUCT_ID, QUANTITY)
VALUES ('IV00000001', '21884', 3);

SELECT * FROM CN3.PRODUCT_STOCK_MANAGER WHERE PRODUCT_ID = '21884';

SELECT * FROM CN3.INVOICE WHERE INVOICE_ID = 'IV00000001';



--FUNTION chạy trong manager-----------------------------------

CREATE OR REPLACE FUNCTION get_total_revenue_all_branches
RETURN NUMBER
AS
  v_total_local   NUMBER := 0;
  v_total_br01    NUMBER := 0;
  v_total_br02    NUMBER := 0;
BEGIN
  -- 1. Doanh thu tại chi nhánh hiện tại (ví dụ: BR01)
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_local
  FROM CN3.INVOICE;

  -- 2. Doanh thu tại BR02
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_br01
  FROM CN1.INVOICE@MANAGER_LINK1;

  -- 3. Doanh thu tại BR03
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_br02
  FROM CN2.INVOICE@MANAGER_LINK2;

  -- 4. Trả về tổng cộng
  RETURN v_total_local + v_total_br01 + v_total_br02;
EXCEPTION
  WHEN OTHERS THEN
    -- Trong môi trường demo nếu 1 DB link bị lỗi, ta có thể trả về -1
    RETURN -1;
END;
/
SELECT get_total_revenue_all_branches FROM DUAL;


----------------------phần isolation--------------------------
--user employee
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
 --phantomread
SELECT INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID
FROM CN3.INVOICE
WHERE INVOICE_DATE > TO_DATE('01/01/2024', 'DD/MM/YYYY')

UNION ALL

SELECT INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID
FROM CN1.INVOICE@EMPLOYEE_LINK1
WHERE INVOICE_DATE > TO_DATE('01/01/2024', 'DD/MM/YYYY');


INSERT INTO CN3.INVOICE (INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID)
VALUES ('IV00000001', SYSDATE, 0, 'EMP0668', '15362');

-- chạy cho cn kim
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN
UPDATE CN1.CUSTOMER@EMPLOYEE_LINK1
SET FIRST_NAME = 'Sara',
LAST_NAME = 'Mary2',
PHONE = '935.435.8644'
WHERE CUSTOMER_ID = 13085;
END;

commit;

BEGIN
UPDATE CN1.CUSTOMER@EMPLOYEE_Link1
SET FIRST_NAME = 'Sara',
LAST_NAME = 'Mit',
PHONE = '935.435.8644'
WHERE CUSTOMER_ID = 13085;
commit;
END;


-- deadlock
--user manager 
ALTER SESSION SET ISOLATION_LEVEL = SERIALIZABLE;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

select * from CN3.PRODUCT_STOCK_MANAGER where  PRODUCT_ID = '21884' or PRODUCT_ID = '82081' 
;

-- chay o chi nhanh 3
BEGIN
UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + 1
WHERE PRODUCT_ID = '20681';

DBMS_SESSION.SLEEP(10);

UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + 1
WHERE PRODUCT_ID = '21815';

commit;

END;


