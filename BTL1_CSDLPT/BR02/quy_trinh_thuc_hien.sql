-- CN2

-- TẠO USER MANAGER
CREATE USER MANAGER IDENTIFIED BY 123;

-- TẠO USER EMPLOYEE
CREATE USER EMPLOYEE IDENTIFIED BY 123;

-- TẠO USER DIRECTOR
CREATE USER DIRECTOR IDENTIFIED BY 123;

-- CẤP QUYỀN CONNECT CHO DIRECTOR
GRANT CONNECT TO DIRECTOR;

-- CẤP QUYỀN CONNECT CHO CÁC USER
GRANT CONNECT, CREATE DATABASE LINK TO MANAGER;
GRANT CONNECT, CREATE DATABASE LINK TO EMPLOYEE;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN2 CHO DIRECTOR
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT_STOCK_MANAGER TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT_STOCK_EMPLOYEE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE_DETAIL TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.EMPLOYEE TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.CUSTOMER TO DIRECTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.BRANCH TO DIRECTOR;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN2 CHO MANAGER
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE_DETAIL TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.EMPLOYEE TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.CUSTOMER TO MANAGER;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT_STOCK_MANAGER TO MANAGER;

-- CẤP QUYỀN SELECT TRÊN BẢNG BRANCH CHO MANAGER
GRANT SELECT ON CN2.BRANCH TO MANAGER;

-- CẤP QUYỀN SELECT, INSERT, UPDATE, DELETE TRÊN CÁC BẢNG CỦA CN2 CHO EMPLOYEE
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE_DETAIL TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.INVOICE TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.CUSTOMER TO EMPLOYEE;
GRANT SELECT, INSERT, UPDATE, DELETE ON CN2.PRODUCT_STOCK_EMPLOYEE TO EMPLOYEE;

-- CẤP QUYỀN SELECT TRÊN BẢNG BRANCH CHO EMPLOYEE
GRANT SELECT ON CN2.BRANCH TO EMPLOYEE;

-- TẠO DATABASE LINK CHO MANAGER
CREATE DATABASE LINK MANAGER_LINK1
CONNECT TO MANAGER IDENTIFIED BY "123"
USING 'Nganlink';

CREATE DATABASE LINK MANAGER_LINK3
CONNECT TO MANAGER IDENTIFIED BY "123"
USING 'Minhlink';

-- TẠO DATABASE LINK CHO EMPLOYEE
CREATE DATABASE LINK EMPLOYEE_LINK1
CONNECT TO EMPLOYEE IDENTIFIED BY "123"
USING 'Nganlink';

CREATE DATABASE LINK EMPLOYEE_LINK3
CONNECT TO EMPLOYEE IDENTIFIED BY "123"
USING 'Minhlink';

--QUERY 5- NhanVien: Liệt kê tất cả các khách hang mua hàng hơn 80 lần ở chi nhánh 1 hoặc chi nhánh 3.

SELECT C.CUSTOMER_ID, C.FIRST_NAME || ' ' || C.LAST_NAME AS NAME, COUNT(*) AS SO_HOA_DON, 'CN1' AS CHI_NHANH
FROM CN2.INVOICE I
JOIN CN2.CUSTOMER C ON I.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME
HAVING COUNT(*) > 80

UNION ALL

SELECT C.CUSTOMER_ID, C.FIRST_NAME || ' ' || C.LAST_NAME AS NAME, COUNT(*) AS SO_HOA_DON, 'CN3' AS CHI_NHANH
FROM CN3.INVOICE@EMPLOYEE_Link3 I
JOIN CN3.CUSTOMER@EMPLOYEE_Link3 C ON I.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME
HAVING COUNT(*) > 80;

-- QUERY 7 - QuanLy:  Tính doanh thu trung bình của từng nhân viên tại Chi nhánh 2 và CN3, và chỉ lấy các nhân viên có doanh thu trung bình lớn hơn 1 triệu đồng

SELECT
    e.EMPLOYEE_ID,
    e.FIRST_NAME || ' ' || e.LAST_NAME AS EMPLOYEE_NAME,
    AVG(i.TOTAL_AMOUNT) AS AVG_SALES
FROM CN2.INVOICE i
JOIN CN2.EMPLOYEE e ON i.EMPLOYEE_ID = e.EMPLOYEE_ID
WHERE e.BRANCH_ID = 'BR02'
GROUP BY e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME
HAVING AVG(i.TOTAL_AMOUNT) > 1000000
UNION
SELECT
    e.EMPLOYEE_ID,
    e.FIRST_NAME || ' ' || e.LAST_NAME AS EMPLOYEE_NAME,
    AVG(i.TOTAL_AMOUNT) AS AVG_SALES
FROM CN3.INVOICE@MANAGER_LINK3 i
JOIN CN3.EMPLOYEE@MANAGER_LINK3 e ON i.EMPLOYEE_ID = e.EMPLOYEE_ID
WHERE e.BRANCH_ID = 'BR03'
GROUP BY e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME
HAVING AVG(i.TOTAL_AMOUNT) > 1000000
ORDER BY AVG_SALES DESC;

*TRIGGER - TẠO TRIGGER CHẠY CN2
CREATE OR REPLACE TRIGGER trg_update_stock_and_total
BEFORE INSERT ON CN2.INVOICE_DETAIL
FOR EACH ROW
DECLARE
    v_stock_qty    NUMBER := 0;
    v_unit_price   NUMBER := 0;
BEGIN
    -- 1. Lấy số lượng tồn kho
    SELECT QUANTITY_IN_STOCK
    INTO v_stock_qty
    FROM CN2.PRODUCT_STOCK_MANAGER
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 2. Kiểm tra tồn kho
    IF v_stock_qty < :NEW.QUANTITY THEN
        RAISE_APPLICATION_ERROR(-20001,
            'Không đủ số lượng tồn kho cho sản phẩm ID ' || :NEW.PRODUCT_ID);
    END IF;

    -- 3. Trừ tồn kho
    UPDATE CN2.PRODUCT_STOCK_MANAGER
    SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - :NEW.QUANTITY
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 4. Lấy đơn giá
    SELECT UNIT_PRICE
    INTO v_unit_price
    FROM CN2.PRODUCT
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    -- 5. Cộng tổng tiền vào hóa đơn
    UPDATE CN2.INVOICE
    SET TOTAL_AMOUNT = NVL(TOTAL_AMOUNT, 0) + (v_unit_price * :NEW.QUANTITY)
    WHERE INVOICE_ID = :NEW.INVOICE_ID;
END;

/*triger 2 */
CREATE OR REPLACE TRIGGER trg_force_total_zero_on_invoice
BEFORE INSERT ON INVOICE
FOR EACH ROW
BEGIN
    -- Ép giá trị tổng tiền về 0 bất kể người dùng nhập gì
    :NEW.TOTAL_AMOUNT := 0;
END;
 /* test trigger 1*/
INSERT INTO INVOICE 
    (INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID)
VALUES 
    ('IV001', SYSDATE, 0, 'EMP0335', '13078');
/* test trigger 2 */
INSERT INTO INVOICE 
    (INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID)
VALUES 
    ('IV003', SYSDATE, 1000, 'EMP0335', '13078');
SELECT * 
FROM INVOICE 
WHERE INVOICE_ID = 'IV003';

 *gán quyền tạo procedure
GRANT CREATE PROCEDURE TO MANAGER;
* PROCEDURE
CREATE OR REPLACE PROCEDURE IMPORT_STOCK_BR02(
    p_product_id IN VARCHAR2,
    p_qty          IN NUMBER
)
AUTHID CURRENT_USER
AS
    v_qty_br01   NUMBER := 0;
    v_qty_br03   NUMBER := 0;
    v_remaining  NUMBER := p_qty;
BEGIN
    -- Lấy tồn kho ở BR01 (CN1) và BR03 (CN3)
    SELECT NVL(QUANTITY_IN_STOCK, 0)
    INTO v_qty_br01
    FROM CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
    WHERE PRODUCT_ID = p_product_id;

    SELECT NVL(QUANTITY_IN_STOCK, 0)
    INTO v_qty_br03
    FROM CN3.PRODUCT_STOCK_MANAGER@MANAGER_LINK3
    WHERE PRODUCT_ID = p_product_id;

    -- Rút hàng từ BR01 nếu đủ
    IF v_qty_br01 >= p_qty AND v_qty_br01 >= v_qty_br03 THEN
        UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - p_qty
        WHERE PRODUCT_ID = p_product_id;

        UPDATE CN2.PRODUCT_STOCK_MANAGER
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + p_qty
        WHERE PRODUCT_ID = p_product_id;

        DBMS_OUTPUT.PUT_LINE('Đã nhập ' || p_qty || ' sản phẩm từ CN1 (BR01)');

    ELSIF v_qty_br03 >= p_qty THEN
        UPDATE CN3.PRODUCT_STOCK_MANAGER@MANAGER_LINK3
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - p_qty
        WHERE PRODUCT_ID = p_product_id;

        UPDATE CN2.PRODUCT_STOCK_MANAGER
        SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + p_qty
        WHERE PRODUCT_ID = p_product_id;

        DBMS_OUTPUT.PUT_LINE('Đã nhập ' || p_qty || ' sản phẩm từ CN3 (BR03)');

    ELSIF v_qty_br01 + v_qty_br03 >= p_qty THEN
        IF v_qty_br01 > 0 THEN
            UPDATE CN1.PRODUCT_STOCK_MANAGER@MANAGER_LINK1
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - v_qty_br01
            WHERE PRODUCT_ID = p_product_id;

            UPDATE CN2.PRODUCT_STOCK_MANAGER
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + v_qty_br01
            WHERE PRODUCT_ID = p_product_id;

            v_remaining := v_remaining - v_qty_br01;
        END IF;

        IF v_remaining > 0 AND v_qty_br03 >= v_remaining THEN
            UPDATE CN3.PRODUCT_STOCK_MANAGER@MANAGER_LINK3
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - v_remaining
            WHERE PRODUCT_ID = p_product_id;

            UPDATE CN2.PRODUCT_STOCK_MANAGER
            SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + v_remaining
            WHERE PRODUCT_ID = p_product_id;

            DBMS_OUTPUT.PUT_LINE('Đã nhập từ CN1 (' || p_qty - v_remaining || ') và CN3 (' || v_remaining || ') sản phẩm');
        END IF;

    ELSE
        DBMS_OUTPUT.PUT_LINE('Không đủ sản phẩm ở CN1 và CN3 để nhập ' || p_qty || ' sản phẩm');
    END IF;

    COMMIT;
END;
/

INSERT INTO PRODUCT_STOCK_MANAGER (BRANCH_ID, PRODUCT_ID, QUANTITY_IN_STOCK, LAST_UPDATE_DATE) VALUES ('BR02', '21884', 20, TO_DATE('2025-05-05', 'YYYY-MM-DD'));

/
INSERT INTO CN2.INVOICE 
    (INVOICE_ID, INVOICE_DATE, TOTAL_AMOUNT, EMPLOYEE_ID, CUSTOMER_ID)
VALUES 
    ('IV002', SYSDATE, 0, 'EMP0335', '13078');


/* FUNCTION */
CREATE OR REPLACE FUNCTION get_total_revenue_all_branches
RETURN NUMBER
AS
  v_total_local   NUMBER := 0;
  v_total_br02    NUMBER := 0;
  v_total_br03    NUMBER := 0;
BEGIN
  -- 1. Doanh thu tại chi nhánh hiện tại (ví dụ: BR01)
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_local
  FROM CN2.INVOICE;

  -- 2. Doanh thu tại BR01
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_br02
  FROM CN1.INVOICE@MANAGER_LINK1;

  -- 3. Doanh thu tại BR03
  SELECT NVL(SUM(TOTAL_AMOUNT), 0)
  INTO v_total_br03
  FROM CN3.INVOICE@MANAGER_LINK3;

  -- 4. Trả về tổng cộng
  RETURN v_total_local + v_total_br02 + v_total_br03;
EXCEPTION
  WHEN OTHERS THEN
    -- Trong môi trường demo nếu 1 DB link bị lỗi, ta có thể trả về -1
    RETURN -1;
END;
/
SELECT get_total_revenue_all_branches FROM DUAL;

